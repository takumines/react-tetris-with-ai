## 開発プロセス
- コードを変更したら、必ずprettierとeslintを実行して、エラーが発生したら必ず修正する
- コードの変更によりドキュメントを更新する必要がある場合は、必ず`docs/tetris_design_specification.md`を更新する
- コミットルール
  - 複数の変更がある場合は複数のコミットに分割する
  - 1つのコミットには1つの論理的な変更のみを含める


## コーディング規約
- ESLint/Prettier の標準的なルールに準拠
- 関数やコンポーネントには適切なコメントを含める
- 関数は基本的にアロー関数を利用する

## 技術スタック
- React 19
- TypeScript 5.7
- vitest
- vite
- React Router
- Tailwind CSS

## テスト容易性
- モック可能な設計
- 副作用の分離
- テストデータの準備

## 関数の実装
- 純粋関数として実装し、副作用を最小限に
- TypeScriptの型定義を厳密に行う
- 引数と戻り値の型を明示的に定義
- デフォルト値とnullチェックを適切に実装
